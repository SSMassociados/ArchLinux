10 OPERADORES DE ENCADEAMENTO √öTEIS NO LINUX COM EXEMPLOS PR√ÅTICOS

O encadeamento de comandos do Linux significa combinar v√°rios comandos e faz√™-los executar com base no comportamento do operador usado entre eles. O encadeamento de comandos no Linux √© algo como escrever scripts de shell curtos no pr√≥prio shell e execut√°-los diretamente do terminal. O encadeamento permite automatizar o processo. Al√©m disso, uma m√°quina desacompanhada pode funcionar de maneira muito sistem√°tica com a ajuda de operadores de encadeamento.

1. OPERADOR E COMERCIAL (&)

A fun√ß√£o de ' & ' √© fazer com que o comando seja executado em segundo plano. Basta digitar o comando seguido de um espa√ßo em branco e ' & '. Voc√™ pode executar mais de um comando em segundo plano, de uma s√≥ vez.

Execute um comando em segundo plano:

tecmint@localhost:~$ ping ¬≠c5 www.tecmint.com &

Execute dois comandos em segundo plano, simultaneamente:

root@localhost:/home/tecmint# apt-get update & apt-get upgrade &

2. OPERADOR DE PONTO E V√çRGULA (;)

O operador ponto-e-v√≠rgula possibilita a execu√ß√£o de v√°rios comandos de uma s√≥ vez e a execu√ß√£o do comando ocorre de forma sequencial.

root@localhost:/home/tecmint# apt-get update ; apt-get upgrade ; mkdir test

A combina√ß√£o de comandos acima executar√° primeiro a instru√ß√£o de atualiza√ß√£o , depois a instru√ß√£o de atualiza√ß√£o e, finalmente, criar√° um diret√≥rio de ' teste ' no diret√≥rio de trabalho atual.

3. OPERADOR AND (&&)

O operador AND ( && ) executaria o segundo comando apenas, se a execu√ß√£o do primeiro comando TIVER SUCESSO , ou seja, o status de sa√≠da do primeiro comando √© 0 . Este comando √© muito √∫til para verificar o status de execu√ß√£o do √∫ltimo comando.

Por exemplo, eu quero visitar o site tecmint.com usando comandar liga√ß√µes , no terminal, mas antes que eu preciso verificar se o host est√° vivo ou n√£o .

root@localhost:/home/tecmint# ping -c3 www.tecmint.com && links www.tecmint.com

4. OPERADOR OR (||)

O operador OR ( || ) √© muito parecido com uma instru√ß√£o ' else ' na programa√ß√£o. O operador acima permite que voc√™ execute o segundo comando apenas se a execu√ß√£o do primeiro comando falhar, ou seja, o status de sa√≠da do primeiro comando √© ' 1 '.

Por exemplo, eu quero executar ' apt-get update ' de uma conta n√£o root e se o primeiro comando falhar, o segundo comando 'links www.tecmint.com ' ser√° executado.

tecmint@localhost:~$ apt-get update || links tecmint.com

No comando acima, uma vez que o usu√°rio n√£o tinha permiss√£o para atualizar o sistema, isso significa que o status de sa√≠da do primeiro comando √© '1' e, portanto, o √∫ltimo comando ' links tecmint.com ' √© executado.

E se o primeiro comando for executado com sucesso, com um status de sa√≠da ' 0 '? Obviamente! O segundo comando n√£o ser√° executado.

tecmint@localhost:~$ mkdir test || links tecmint.com

Aqui, o usu√°rio cria uma pasta ' teste ' em seu diret√≥rio inicial, para a qual o usu√°rio √© permitido. O comando foi executado com sucesso dando um status de sa√≠da ' 0 ' e, portanto, a √∫ltima parte do comando n√£o foi executada.

5. N√ÉO OPERADOR (!)

O operador NOT ( ! ) √â muito parecido com uma instru√ß√£o ' exceto '. Este comando executar√° todos, exceto a condi√ß√£o fornecida. Para entender isso, crie um diret√≥rio ' tecmint ' em seu diret√≥rio inicial e ' cd ' nele.

tecmint@localhost:~$ mkdir tecmint 
tecmint@localhost:~$ cd tecmint

A seguir, crie v√°rios tipos de arquivos na pasta ' tecmint '.

tecmint@localhost:~/tecmint$ touch a.doc b.doc a.pdf b.pdf a.xml b.xml a.html b.html

Veja que criamos todos os novos arquivos dentro da pasta ' tecmint '.

tecmint@localhost:~/tecmint$ ls 

a.doc  a.html  a.pdf  a.xml  b.doc  b.html  b.pdf  b.xml

Agora exclua todos os arquivos, exceto o arquivo ' html ' de uma vez, de forma inteligente.

tecmint@localhost:~/tecmint$ rm -r !(*.html)

S√≥ para verificar, √∫ltima execu√ß√£o. Liste todos os arquivos dispon√≠veis usando o comando ls .

tecmint@localhost:~/tecmint$ ls 

a.html  b.html

6. OPERADOR AND - OR (&& - ||)

O operador acima √©, na verdade, uma combina√ß√£o dos operadores ' E ' e ' OU '. √â muito parecido com uma declara√ß√£o ' if-else '.

Por exemplo, vamos fazer ping em tecmint.com , se sucesso echo ' Verificado ' sen√£o echo ' Host Down '.

tecmint@localhost:~/tecmint$ ping -c3 www.tecmint.com && echo "Verified" || echo "Host Down"

Sa√≠da de amostra

PING www.tecmint.com (212.71.234.61) 56(84) bytes of data. 
64 bytes from www.tecmint.com (212.71.234.61): icmp_req=1 ttl=55 time=216 ms 
64 bytes from www.tecmint.com (212.71.234.61): icmp_req=2 ttl=55 time=224 ms 
64 bytes from www.tecmint.com (212.71.234.61): icmp_req=3 ttl=55 time=226 ms 

--- www.tecmint.com ping statistics --- 
3 packets transmitted, 3 received, 0% packet loss, time 2001ms 
rtt min/avg/max/mdev = 216.960/222.789/226.423/4.199 ms 
Verified

Agora, desconecte sua conex√£o com a Internet e tente o mesmo comando novamente.

tecmint@localhost:~/tecmint$ ping -c3 www.tecmint.com && echo "verified" || echo "Host Down"

Sa√≠da de amostra

ping: unknown host www.tecmint.com 
Host Down
 
7. OPERADOR DE PIPE (|)

Este operador PIPE √© muito √∫til quando a sa√≠da do primeiro comando atua como uma entrada para o segundo comando. Por exemplo, canalize a sa√≠da de ' ls -l ' para ' less ' e veja a sa√≠da do comando.

tecmint@localhost:~$ ls -l | less

8. OPERADOR DE COMBINA√á√ÉO DE COMANDO {}

Combine dois ou mais comandos, o segundo comando depende da execu√ß√£o do primeiro comando.

Por exemplo, verifique se um diret√≥rio ' bin ' est√° dispon√≠vel ou n√£o e produza a sa√≠da correspondente.

tecmint@localhost:~$ [ -d bin ] || { echo Directory does not exist, creating directory now.; mkdir bin; } && echo Directory exists.

9. OPERADOR DE PRECED√äNCIA ()

O Operador possibilita a execu√ß√£o de comandos em ordem de preced√™ncia.

Command_x1 &&Command_x2 || Command_x3 && Command_x4.

No pseudo comando acima, e se Command_x1 falhar? Nenhum dos Command_x2 , Command_x3 , Command_x4 seria executado, para isso usamos o operador de preced√™ncia , como:

(Command_x1 &&Command_x2) || (Command_x3 && Command_x4)

No pseudo comando acima, se Command_x1 falhar, Command_x2 tamb√©m falhar√°, mas ainda Command_x3 e Command_x4 executado depende do status de sa√≠da de Command_x3 .

10. OPERADOR DE CONCATENA√á√ÉO (\)

O operador de concatena√ß√£o ( \ ) como o nome especifica, √© usado para concatenar comandos grandes em v√°rias linhas no shell. Por exemplo, o comando abaixo abrir√° o arquivo de texto test (1) .txt .

tecmint@localhost:~/Downloads$ nano test\(1\).txt

√â tudo por agora. Em breve vou escrever outro artigo interessante. At√© l√° Fique ligado, saud√°vel e conectado √† Tecmint . N√£o se esque√ßa de dar seu feedback valioso em nossa se√ß√£o de coment√°rios.

üí¢Ô∏è OPERADORES DE REDIRECIONAMENTO

Os operadores de redirecionamento s√£o totalmente essenciais nos sistemas baseados em Unix, inclusive o Linux. Eles permitem bastantes recursos, como o redirecionamento da sa√≠da de um programa para um arquivo, enviar a sa√≠da de um programa para entrada de outro e muito mais!

Os operadores s√£o: >, >>, <, 2> e | (o mais importante!).

O OPERADOR >

O operador > √© usado para sobrescrever um arquivo com a sa√≠da do comando

Algumas caracter√≠sticas:

O arquivo ser√° sobrescrito! Cuidado para n√£o fazer nenhuma m...
Caso n√£o se tenha permiss√£o para escrever no arquivo, vai dar erro (o que tu esperava?).
Caso o arquivo n√£o exista, ele ser√° criado.

O OPERADOR >>

Seria a mesma coisa que o >, mas com uma diferen√ßa: ele n√£o sobrescreve o arquivo. Neste caso voc√™ poder√° escrever mais.
As caracter√≠sticas s√£o a mesmas, com a diferen√ßa que o arquivo n√£o ser√° sobrescrito.

O OPERADOR <

A fun√ß√£o deste operador √© o contr√°rio do >: ao inv√©s de mandar a sa√≠da do comando para o arquivo, ele manda o arquivo como entrada do comando.

Seria o mesmo que voc√™ digitar tudo que tem no arquivo como entrada, mas como o pessoal do Unix tem bom senso :), eles automatizaram isso. O ^D tamb√©m √© automatizado.

Este operador pode facilmente ser substitu√≠do pelo pipe (|), junto com o comando 'cat'.

O OPERADOR 2>

Quando vai se testar o operador >, voc√™ pode facilmente verificar que ele n√£o redireciona mensagens de erro.

O operador 2> tem esta fun√ß√£o: redirecionar somente as mensagens de erro para um arquivo.

O PIPE

Este √©, com certeza, o mais importante de todos os operadores de redirecionamento.
